# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
from cmath import sqrt

def triangular_numbers(length):
    numbers = []
    for a in range(1, length+1):
        b=0
        for n in range(1, a+1):
            b += n
        numbers.append(b)
    return numbers

def find_divisors_count(number):
    # Does the sqrt thing come into play here? If I just want a count I only need to get over to 250 as they all pair off
    divisor_count = 0
    for i in range(1, round(sqrt(number).real) +1):
        if number % i == 0:
            divisor_count += 2

    return divisor_count

length = 100000
for a in range(1, length+1):
    b=0
    for n in range(1, a+1):
        b += n
    if find_divisors_count(b) > 500:
        print(b)
        break